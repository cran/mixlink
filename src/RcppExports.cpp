// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// d_mixlink_binom
Rcpp::NumericVector d_mixlink_binom(const Rcpp::IntegerVector& y, const Rcpp::IntegerVector& m, const Rcpp::NumericVector& mean, const Rcpp::NumericVector& Pi, const Rcpp::NumericVector& kappa, int subdiv, double rel_tol, double abs_tol);
RcppExport SEXP mixlink_d_mixlink_binom(SEXP ySEXP, SEXP mSEXP, SEXP meanSEXP, SEXP PiSEXP, SEXP kappaSEXP, SEXP subdivSEXP, SEXP rel_tolSEXP, SEXP abs_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< int >::type subdiv(subdivSEXP);
    Rcpp::traits::input_parameter< double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< double >::type abs_tol(abs_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(d_mixlink_binom(y, m, mean, Pi, kappa, subdiv, rel_tol, abs_tol));
    return rcpp_result_gen;
END_RCPP
}
// d_mixlink_pois
Rcpp::NumericVector d_mixlink_pois(const Rcpp::IntegerVector& y, const Rcpp::NumericVector& mean, const Rcpp::NumericVector& Pi, const Rcpp::NumericVector& kappa);
RcppExport SEXP mixlink_d_mixlink_pois(SEXP ySEXP, SEXP meanSEXP, SEXP PiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(d_mixlink_pois(y, mean, Pi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// find_vertices_prob
Rcpp::NumericMatrix find_vertices_prob(double p, const Rcpp::NumericVector& Pi, double tol);
RcppExport SEXP mixlink_find_vertices_prob(SEXP pSEXP, SEXP PiSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(find_vertices_prob(p, Pi, tol));
    return rcpp_result_gen;
END_RCPP
}
// find_vertices_nonneg
Rcpp::NumericMatrix find_vertices_nonneg(double p, const Rcpp::NumericVector& Pi);
RcppExport SEXP mixlink_find_vertices_nonneg(SEXP pSEXP, SEXP PiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Pi(PiSEXP);
    rcpp_result_gen = Rcpp::wrap(find_vertices_nonneg(p, Pi));
    return rcpp_result_gen;
END_RCPP
}
// mixlink_gibbs_Q_binom
Rcpp::NumericVector mixlink_gibbs_Q_binom(const Rcpp::IntegerVector& y, const Rcpp::IntegerVector& m, const Rcpp::NumericVector& mean, const Rcpp::NumericMatrix& psi, const Rcpp::NumericVector& Pi, const Rcpp::NumericVector& kappa, double find_vert_tol);
RcppExport SEXP mixlink_mixlink_gibbs_Q_binom(SEXP ySEXP, SEXP mSEXP, SEXP meanSEXP, SEXP psiSEXP, SEXP PiSEXP, SEXP kappaSEXP, SEXP find_vert_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type find_vert_tol(find_vert_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(mixlink_gibbs_Q_binom(y, m, mean, psi, Pi, kappa, find_vert_tol));
    return rcpp_result_gen;
END_RCPP
}
// mixlink_gibbs_Q_pois
Rcpp::NumericVector mixlink_gibbs_Q_pois(const Rcpp::IntegerVector& y, const Rcpp::NumericVector& mean, const Rcpp::NumericMatrix& psi, const Rcpp::NumericVector& Pi, const Rcpp::NumericVector& kappa);
RcppExport SEXP mixlink_mixlink_gibbs_Q_pois(SEXP ySEXP, SEXP meanSEXP, SEXP psiSEXP, SEXP PiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(mixlink_gibbs_Q_pois(y, mean, psi, Pi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// hyperg_1F1
Rcpp::NumericVector hyperg_1F1(const Rcpp::NumericVector& a, const Rcpp::NumericVector& b, const Rcpp::NumericVector& x);
RcppExport SEXP mixlink_hyperg_1F1(SEXP aSEXP, SEXP bSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hyperg_1F1(a, b, x));
    return rcpp_result_gen;
END_RCPP
}
// rwmetrop_cpp
Rcpp::List rwmetrop_cpp(const Rcpp::NumericVector& par_init, const Rcpp::Function& logf, const Rcpp::NumericMatrix& pr_var_half_trans, const Rcpp::List& grp_idx_list, int R, int burn, int thin, int report_period);
RcppExport SEXP mixlink_rwmetrop_cpp(SEXP par_initSEXP, SEXP logfSEXP, SEXP pr_var_half_transSEXP, SEXP grp_idx_listSEXP, SEXP RSEXP, SEXP burnSEXP, SEXP thinSEXP, SEXP report_periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par_init(par_initSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Function& >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pr_var_half_trans(pr_var_half_transSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type grp_idx_list(grp_idx_listSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type report_period(report_periodSEXP);
    rcpp_result_gen = Rcpp::wrap(rwmetrop_cpp(par_init, logf, pr_var_half_trans, grp_idx_list, R, burn, thin, report_period));
    return rcpp_result_gen;
END_RCPP
}
// seq_int_ordered
Rcpp::IntegerVector seq_int_ordered(double from, double to);
RcppExport SEXP mixlink_seq_int_ordered(SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_int_ordered(from, to));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"mixlink_d_mixlink_binom", (DL_FUNC) &mixlink_d_mixlink_binom, 8},
    {"mixlink_d_mixlink_pois", (DL_FUNC) &mixlink_d_mixlink_pois, 4},
    {"mixlink_find_vertices_prob", (DL_FUNC) &mixlink_find_vertices_prob, 3},
    {"mixlink_find_vertices_nonneg", (DL_FUNC) &mixlink_find_vertices_nonneg, 2},
    {"mixlink_mixlink_gibbs_Q_binom", (DL_FUNC) &mixlink_mixlink_gibbs_Q_binom, 7},
    {"mixlink_mixlink_gibbs_Q_pois", (DL_FUNC) &mixlink_mixlink_gibbs_Q_pois, 5},
    {"mixlink_hyperg_1F1", (DL_FUNC) &mixlink_hyperg_1F1, 3},
    {"mixlink_rwmetrop_cpp", (DL_FUNC) &mixlink_rwmetrop_cpp, 8},
    {"mixlink_seq_int_ordered", (DL_FUNC) &mixlink_seq_int_ordered, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixlink(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
